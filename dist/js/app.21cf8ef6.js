(function(){var e={9527:function(e,n,t){"use strict";t.r(n),n["default"]='Here is the codes that\'s generated with llms, with some tinkering for use under Mac. The problem is that due to not using libsndfile, the wav format seems broken in devices under Ubuntu.\n\n## TODO\n- [ ] Fix the broken voice, it might be related to the sample rate\n- [ ] Address the issue of environmental noise interference\n\n## The build command\n\n```shell\ng++ -std=c++17 -Wall -O2 -o recorder main.cpp -lportaudio -pthread\n```\n\n## The full codes for main.cpp\n\n```cpp\n#include <portaudio.h>\n#include <chrono>\n#include <filesystem>\n#include <fstream>\n#include <iostream>\n#include <string>\n#include <vector>\n#include <cmath>\n#include <cstring>\n#include <algorithm>\n#include <iterator>\n#include <thread>\n#include <queue>\n#include <mutex>\n#include <condition_variable>\n\nnamespace fs = std::filesystem;\n\nusing Sample = float;\nconstexpr int SAMPLE_RATE = 16000;\nconstexpr int FRAMES_PER_BUFFER = 512;\nconstexpr int NUM_CHANNELS = 1;\n// constexpr float SILENCE_THRESHOLD = 0.02f;\n// constexpr int SILENCE_DURATION_MS = 1000;\nconstexpr int MAX_CHUNK_DURATION_MS = 3000;\nconst int MAX_CHUNK_FRAMES = SAMPLE_RATE * MAX_CHUNK_DURATION_MS / 1000;\n\nstd::queue<std::vector<Sample>> audioQueue;\nstd::mutex queueMutex;\nstd::condition_variable queueCond;\nbool stopWriter = false;\n\nfloat silenceThreshold = 0.02f;\nint silenceDurationMs = 200;\n\n// Converts float [-1.0, 1.0] to 16-bit PCM\nint16_t floatToInt16(Sample s) {\n    s = std::max(-1.0f, std::min(1.0f, s));\n    return static_cast<int16_t>(s * 32767);\n}\n\nstd::string generateFilename() {\n    auto now = std::chrono::system_clock::now();\n    auto timestamp =\n        std::chrono::duration_cast<std::chrono::seconds>(now.time_since_epoch()).count();\n    return "../audios/" + std::to_string(timestamp) + ".wav";\n}\n\nvoid writeWavFile(const std::vector<Sample>& audio) {\n    std::string filename = generateFilename();\n    std::ofstream file(filename, std::ios::binary);\n    if (!file) {\n        std::cerr << "Cannot open file for writing: " << filename << "\\n";\n        return;\n    }\n\n    std::vector<int16_t> int16Buffer;\n    int16Buffer.reserve(audio.size());\n    for (Sample s : audio) {\n        s = std::max(-1.0f, std::min(1.0f, s));  // Clip\n        int16_t i16 = static_cast<int16_t>(std::round(s * 32767.0f));\n        int16Buffer.push_back(i16);\n    }\n\n    int32_t dataSize = int16Buffer.size() * sizeof(int16_t);\n    int32_t chunkSize = 36 + dataSize;\n\n    file.write("RIFF", 4);\n    file.write(reinterpret_cast<const char*>(&chunkSize), 4);\n    file.write("WAVE", 4);\n\n    file.write("fmt ", 4);\n    int32_t subchunk1Size = 16;\n    int16_t audioFormat = 1;\n    int16_t numChannels = NUM_CHANNELS;\n    int32_t sampleRate = SAMPLE_RATE;\n    int16_t bitsPerSample = 16;\n    int32_t byteRate = sampleRate * numChannels * bitsPerSample / 8;\n    int16_t blockAlign = numChannels * bitsPerSample / 8;\n\n    file.write(reinterpret_cast<const char*>(&subchunk1Size), 4);\n    file.write(reinterpret_cast<const char*>(&audioFormat), 2);\n    file.write(reinterpret_cast<const char*>(&numChannels), 2);\n    file.write(reinterpret_cast<const char*>(&sampleRate), 4);\n    file.write(reinterpret_cast<const char*>(&byteRate), 4);\n    file.write(reinterpret_cast<const char*>(&blockAlign), 2);\n    file.write(reinterpret_cast<const char*>(&bitsPerSample), 2);\n\n    file.write("data", 4);\n    file.write(reinterpret_cast<const char*>(&dataSize), 4);\n\n    file.write(reinterpret_cast<const char*>(int16Buffer.data()), dataSize);\n    std::cout << "Saved: " << filename << "\\n";\n}\n\nvoid writerThread() {\n    while (true) {\n        std::vector<Sample> audio;\n        {\n            std::unique_lock<std::mutex> lock(queueMutex);\n            queueCond.wait(lock, [] { return !audioQueue.empty() || stopWriter; });\n            if (stopWriter && audioQueue.empty()) break;\n            audio = std::move(audioQueue.front());\n            audioQueue.pop();\n        }\n        writeWavFile(audio);\n    }\n}\n\nint findDeviceWithName(const std::string& needle) {\n    int numDevices = Pa_GetDeviceCount();\n    for (int i = 0; i < numDevices; ++i) {\n        const PaDeviceInfo* info = Pa_GetDeviceInfo(i);\n        std::string name = info->name ? info->name : "";\n        if (name.find(needle) != std::string::npos) {\n            std::cout << "✔ Found match: index=" << i << ", name=\\"" << name << "\\"\\n";\n            return i;\n        }\n    }\n    std::cerr << "❌ No match found for \\"" << needle << "\\"\\n";\n    return -1;\n}\n\nbool isVoice(const Sample* buffer, int frameCount, float threshold) {\n    float energy = 0.0f;\n    int zeroCrossings = 0;\n    bool lastPositive = buffer[0] > 0;\n\n    for (int i = 0; i < frameCount; ++i) {\n        energy += buffer[i] * buffer[i];\n\n        bool currentPositive = buffer[i] > 0;\n        if (currentPositive != lastPositive) {\n            zeroCrossings++;\n            lastPositive = currentPositive;\n        }\n    }\n\n    float rms = std::sqrt(energy / frameCount);\n    float zcr = static_cast<float>(zeroCrossings) / frameCount;\n\n    bool isLoudEnough = rms > threshold;\n    bool isHumanZCR = zcr > 0.05f && zcr < 0.35f;\n\n    return isLoudEnough && isHumanZCR;\n}\n\nint main(int argc, char** argv) {\n    for (int i = 1; i < argc; ++i) {\n        std::string arg = argv[i];\n        if ((arg == "--threshold" || arg == "-t") && i + 1 < argc) {\n            try {\n                silenceThreshold = std::stof(argv[++i]);\n            } catch (...) {\n                std::cerr << "Invalid threshold value, using default.\\n";\n            }\n        } else if ((arg == "--duration" || arg == "-d") && i + 1 < argc) {\n            try {\n                silenceDurationMs = std::stoi(argv[++i]);\n            } catch (...) {\n                std::cerr << "Invalid duration value, using default.\\n";\n            }\n        } else {\n            std::cerr << "Unknown option: " << arg << "\\n";\n        }\n    }\n\n    if (!fs::exists("../audios")) {\n        fs::create_directories("../audios");\n    }\n\n    Pa_Initialize();\n    std::thread writer(writerThread);\n\n    PaStream* stream;\n    PaStreamParameters inputParams;\n\n    int deviceIndex = -1;\n\n#if defined(__APPLE__) && defined(__MACH__)\n    // macOS: use default input device\n    deviceIndex = Pa_GetDefaultInputDevice();\n    std::cout << "macOS: using default input device index = " << deviceIndex << "\\n";\n#else\n    // Linux/others: search for named device\n    deviceIndex = findDeviceWithName("USB Audio Device");\n    if (deviceIndex < 0) {\n        std::cerr << "No USB Audio Device found, fallback to default input device.\\n";\n        deviceIndex = Pa_GetDefaultInputDevice();\n    }\n#endif\n\n    if (deviceIndex < 0) {\n        std::cerr << "❌ Failed to select an input device.\\n";\n        return 1;\n    }\n\n    inputParams.device = deviceIndex;\n\n    inputParams.channelCount = NUM_CHANNELS;\n    inputParams.sampleFormat = paFloat32;\n    inputParams.suggestedLatency = Pa_GetDeviceInfo(inputParams.device)->defaultLowInputLatency;\n    inputParams.hostApiSpecificStreamInfo = nullptr;\n\n    PaError err = Pa_OpenStream(&stream, &inputParams, nullptr, SAMPLE_RATE, FRAMES_PER_BUFFER,\n                                paClipOff, nullptr, nullptr);\n    if (err != paNoError) {\n        std::cerr << "Error opening stream: " << Pa_GetErrorText(err) << "\\n";\n        return 1;\n    }\n\n    err = Pa_StartStream(stream);\n    if (err != paNoError) {\n        std::cerr << "Error starting stream: " << Pa_GetErrorText(err) << "\\n";\n        return 1;\n    }\n\n    std::vector<Sample> currentBuffer;\n    int silentDurationMs = 0;\n    Sample buffer[FRAMES_PER_BUFFER];\n    Sample previousSample = 0.0f;\n\n    std::cout << "Recording. Speak into the mic...\\n";\n\n    while (true) {\n        err = Pa_ReadStream(stream, buffer, FRAMES_PER_BUFFER);\n        if (err != paNoError) {\n            std::cerr << "Error reading stream: " << Pa_GetErrorText(err) << "\\n";\n            break;\n        }\n\n        for (int i = 0; i < FRAMES_PER_BUFFER; ++i) {\n            Sample filtered = buffer[i] - previousSample * 0.95f;\n            previousSample = buffer[i];\n            buffer[i] = filtered;\n        }\n\n        float energy = 0.0f;\n        for (int i = 0; i < FRAMES_PER_BUFFER; ++i) {\n            energy += buffer[i] * buffer[i];\n        }\n\n        bool voice = isVoice(buffer, FRAMES_PER_BUFFER, silenceThreshold);\n        if (!voice) {\n            silentDurationMs += (FRAMES_PER_BUFFER * 1000 / SAMPLE_RATE);\n            if (silentDurationMs >= silenceDurationMs && !currentBuffer.empty()) {\n                std::lock_guard<std::mutex> lock(queueMutex);\n                audioQueue.push(currentBuffer);\n                queueCond.notify_one();\n                currentBuffer.clear();\n            }\n        } else {\n            silentDurationMs = 0;\n            currentBuffer.insert(currentBuffer.end(), buffer, buffer + FRAMES_PER_BUFFER);\n\n            while ((int)currentBuffer.size() >= MAX_CHUNK_FRAMES) {\n                std::vector<Sample> chunk(currentBuffer.begin(),\n                                          currentBuffer.begin() + MAX_CHUNK_FRAMES);\n                std::lock_guard<std::mutex> lock(queueMutex);\n                audioQueue.push(std::move(chunk));\n                queueCond.notify_one();\n                currentBuffer.erase(currentBuffer.begin(),\n                                    currentBuffer.begin() + MAX_CHUNK_FRAMES);\n            }\n        }\n    }\n\n    Pa_StopStream(stream);\n    Pa_CloseStream(stream);\n    Pa_Terminate();\n\n    {\n        std::lock_guard<std::mutex> lock(queueMutex);\n        stopWriter = true;\n        queueCond.notify_one();\n    }\n    writer.join();\n    return 0;\n}\n```\n'},8708:function(e,n,t){"use strict";t.r(n),n["default"]="## SSH Login\n```Shell\ncat ~/.ssh/id_rsa.pub | ssh user@ip 'mkdir -p ~/.ssh && chmod 700 ~/.ssh && cat >> ~/.ssh/authorized_keys && chmod 600 ~/.ssh/authorized_keys'\n\n```\n\n## Check Disk Usage of Same File System, note the '/' and 'x'\n```Shell \ndu -hxd1 / | sort -h\n```\n\n"},1561:function(e,n,t){"use strict";var a=t(5130),o=t(1387),i=t(6768),r=t(4232),s=t(144);const l=e=>((0,i.Qi)("data-v-271b5ae9"),e=e(),(0,i.jt)(),e),u={class:"app-navbar"},c={class:"navbar-inner"},d=l((()=>(0,i.Lk)("h1",{class:"app-title"},"John's Blog",-1))),f={class:"nav-links desktop-only"},v={key:0,class:"nav-drawer mobile-only"};var p={__name:"AppNavbar",setup(e){const n=(0,s.KR)(!1),t=(0,s.KR)(!1);function a(){n.value=!n.value}return(0,i.nT)((()=>{document.documentElement.setAttribute("data-theme",n.value?"dark":"light")})),(e,o)=>{const s=(0,i.g2)("router-link");return(0,i.uX)(),(0,i.CE)("div",{class:(0,r.C4)(["app-container",{dark:n.value}])},[(0,i.Lk)("header",u,[(0,i.Lk)("div",c,[d,(0,i.Lk)("button",{class:"mobile-toggle",onClick:o[0]||(o[0]=e=>t.value=!t.value)},[(0,i.Lk)("span",{class:(0,r.C4)({open:t.value})},null,2)]),(0,i.Lk)("nav",f,[(0,i.bF)(s,{to:"/home",class:"nav-link",exact:""},{default:(0,i.k6)((()=>[(0,i.eW)("Home")])),_:1}),(0,i.bF)(s,{to:"/tools",class:"nav-link"},{default:(0,i.k6)((()=>[(0,i.eW)("Tools")])),_:1}),(0,i.bF)(s,{to:"/blog",class:"nav-link"},{default:(0,i.k6)((()=>[(0,i.eW)("Blog")])),_:1}),(0,i.Lk)("button",{class:"theme-toggle",onClick:a},(0,r.v_)(n.value?"☀️":"🌙"),1)])]),t.value?((0,i.uX)(),(0,i.CE)("nav",v,[(0,i.bF)(s,{to:"/home",class:"nav-link",onClick:o[1]||(o[1]=e=>t.value=!1)},{default:(0,i.k6)((()=>[(0,i.eW)("Home")])),_:1}),(0,i.bF)(s,{to:"/tools",class:"nav-link",onClick:o[2]||(o[2]=e=>t.value=!1)},{default:(0,i.k6)((()=>[(0,i.eW)("Tools")])),_:1}),(0,i.bF)(s,{to:"/blog",class:"nav-link",onClick:o[3]||(o[3]=e=>t.value=!1)},{default:(0,i.k6)((()=>[(0,i.eW)("Blog")])),_:1}),(0,i.Lk)("button",{class:"theme-toggle",onClick:a},(0,r.v_)(n.value?"☀️":"🌙"),1)])):(0,i.Q3)("",!0)])],2)}}},m=t(1241);const h=(0,m.A)(p,[["__scopeId","data-v-271b5ae9"]]);var g=h;const _={class:"page-content"};var b={__name:"MainLayout",setup(e){return(e,n)=>{const t=(0,i.g2)("router-view");return(0,i.uX)(),(0,i.CE)("div",null,[(0,i.bF)(g),(0,i.Lk)("main",_,[(0,i.bF)(t)])])}}};const k=(0,m.A)(b,[["__scopeId","data-v-8fc9b1ac"]]);var w=k;const S={class:"page-layout"},E={class:"page-content"},y=(0,i.Fv)('<section class="intro" data-v-377bbf3a><h1 class="tagline" data-v-377bbf3a><span class="dim" data-v-377bbf3a>Thoughts,</span><span class="highlight" data-v-377bbf3a> Programming,</span><span class="dim" data-v-377bbf3a> Collections</span></h1><h3 class="section-title" data-v-377bbf3a>Most Visited Sites</h3></section>',1),L={class:"site-list"},C=["href"],R=["src","alt"];var F={__name:"HomePage",setup(e){const n=[{name:"Google",url:"https://www.google.com",favicon:"https://www.google.com/favicon.ico"},{name:"Bing",url:"https://www.bing.com",favicon:"https://www.bing.com/sa/simg/favicon-trans-bg-blue-mg-png.png"},{name:"GitHub",url:"https://github.com",favicon:"https://github.githubassets.com/favicons/favicon.svg"},{name:"YouTube",url:"https://www.youtube.com",favicon:"https://s.ytimg.com/yts/img/favicon_32-vflOogEID.png"},{name:"Reddit",url:"https://www.reddit.com",favicon:"https://www.redditstatic.com/desktop2x/img/favicon/favicon-32x32.png"},{name:"Wikipedia",url:"https://www.wikipedia.org",favicon:"https://www.wikipedia.org/static/favicon/wikipedia.ico"},{name:"Stack Overflow",url:"https://stackoverflow.com",favicon:"https://cdn.sstatic.net/Sites/stackoverflow/Img/favicon.ico"}],t=(0,s.KR)(new Array(n.length).fill(!1));async function a(e,n=300){const t=new AbortController,a=setTimeout((()=>t.abort()),n);try{const n=await fetch(e,{method:"HEAD",signal:t.signal,mode:"no-cors"});return clearTimeout(a),n.ok||0===n.status}catch(o){return!1}}return(0,i.sV)((async()=>{await Promise.all(n.map((async(e,n)=>{const o=await a(e.favicon,300);t.value[n]=o})))})),(e,a)=>((0,i.uX)(),(0,i.CE)("div",S,[(0,i.Lk)("main",E,[y,(0,i.Lk)("ul",L,[((0,i.uX)(),(0,i.CE)(i.FK,null,(0,i.pI)(n,((e,n)=>(0,i.Lk)("li",{key:e.name},[(0,i.Lk)("a",{href:e.url,target:"_blank",rel:"noopener"},[t.value[n]?((0,i.uX)(),(0,i.CE)("img",{key:0,src:e.favicon,alt:e.name+" logo",class:"favicon"},null,8,R)):(0,i.Q3)("",!0),(0,i.eW)(" "+(0,r.v_)(e.name),1)],8,C)]))),64))])])]))}};const P=(0,m.A)(F,[["__scopeId","data-v-377bbf3a"]]);var A=P,x=t(1576),M=t.n(x),I=t(5776);const T={class:"container"};var D={__name:"QRCodeGen",setup(e){const n=(0,s.KR)(""),t=e=>{n.value=e.target.value};return(e,o)=>((0,i.uX)(),(0,i.CE)("div",null,[(0,i.Lk)("div",T,[(0,i.bo)((0,i.Lk)("textarea",{class:"text-style",cols:"30",placeholder:"Qr Code Contents","onUpdate:modelValue":o[0]||(o[0]=e=>n.value=e),onInput:t},null,544),[[a.Jo,n.value]]),(0,i.bF)((0,s.R1)(I.Ay),{class:"code-style",value:n.value},null,8,["value"])])]))}};const N=(0,m.A)(D,[["__scopeId","data-v-413f65ec"]]);var O=N,B=t(2391);const U=e=>((0,i.Qi)("data-v-03751c2c"),e=e(),(0,i.jt)(),e),X=["onClick"],j={key:0,class:"hint"},K=U((()=>(0,i.Lk)("p",null," Password should include symbols and at least one character from each pool? ",-1)));var W={__name:"PasswordGen",setup(e){let n=(0,s.Kh)();const t=(0,s.KR)(""),o=(0,s.KR)(!0);(0,i.wB)(t,((e,t)=>{n=B.generateMultiple(3,{length:20,uppercase:!0,numbers:!0,symbols:"yes"===e,excludeSimilarCharacters:!0,strict:"yes"===e})}));const l=e=>{navigator.clipboard.writeText(e).then((()=>{o.value=!1})).catch((e=>{console.log("Error copying to clipboard: "+e.message)}))};return n=B.generateMultiple(3,{length:20,uppercase:!0,numbers:!0,symbols:!0,excludeSimilarCharacters:!0,strict:!0}),(e,u)=>((0,i.uX)(),(0,i.CE)(i.FK,null,[((0,i.uX)(!0),(0,i.CE)(i.FK,null,(0,i.pI)((0,s.R1)(n),(e=>((0,i.uX)(),(0,i.CE)("div",{class:"password-style",key:e,onClick:n=>l(e)},(0,r.v_)(e),9,X)))),128)),o.value?((0,i.uX)(),(0,i.CE)("div",j," Click an item to copy it to the clipboard ")):(0,i.Q3)("",!0),K,(0,i.Lk)("label",null,[(0,i.bo)((0,i.Lk)("input",{type:"radio",name:"answer",value:"yes","onUpdate:modelValue":u[0]||(u[0]=e=>t.value=e)},null,512),[[a.XL,t.value]]),(0,i.eW)(" Yes ")]),(0,i.Lk)("label",null,[(0,i.bo)((0,i.Lk)("input",{type:"radio",name:"answer",value:"no","onUpdate:modelValue":u[1]||(u[1]=e=>t.value=e)},null,512),[[a.XL,t.value]]),(0,i.eW)(" No ")])],64))}};const H=(0,m.A)(W,[["__scopeId","data-v-03751c2c"]]);var Q=H;const z=e=>((0,i.Qi)("data-v-6a7bcf99"),e=e(),(0,i.jt)(),e),q={class:"timestamp-tool"},J=z((()=>(0,i.Lk)("h2",{class:"tool-title"},"Unix Timestamp Tool",-1))),G={class:"timestamp-section"},V=z((()=>(0,i.Lk)("label",{for:"unix"},"Unix Timestamp",-1))),$={class:"timestamp-section"},Y=z((()=>(0,i.Lk)("label",{for:"date"},"Readable Date",-1))),Z={class:"output"},ee=z((()=>(0,i.Lk)("strong",null,"Timestamp:",-1))),ne=z((()=>(0,i.Lk)("strong",null,"Readable Date:",-1)));var te={__name:"UnixTimestampTool",setup(e){const n=(0,s.KR)(Math.floor(Date.now()/1e3)),t=(0,s.KR)(new Date(1e3*n.value).toISOString().slice(0,16)),o=()=>{if(n.value){const e=new Date(1e3*Number(n.value));t.value=e.toISOString().slice(0,16)}},l=()=>{t.value&&(n.value=Math.floor(new Date(t.value).getTime()/1e3))},u=(0,i.EW)((()=>new Date(1e3*Number(n.value)).toLocaleString()));return(e,s)=>((0,i.uX)(),(0,i.CE)("div",q,[J,(0,i.Lk)("div",G,[V,(0,i.bo)((0,i.Lk)("input",{id:"unix",type:"number","onUpdate:modelValue":s[0]||(s[0]=e=>n.value=e),placeholder:"Enter Unix timestamp"},null,512),[[a.Jo,n.value]]),(0,i.Lk)("button",{onClick:o},"Convert to Date")]),(0,i.Lk)("div",$,[Y,(0,i.bo)((0,i.Lk)("input",{id:"date",type:"datetime-local","onUpdate:modelValue":s[1]||(s[1]=e=>t.value=e)},null,512),[[a.Jo,t.value]]),(0,i.Lk)("button",{onClick:l},"Convert to Timestamp")]),(0,i.Lk)("div",Z,[(0,i.Lk)("p",null,[ee,(0,i.eW)(" "+(0,r.v_)(n.value),1)]),(0,i.Lk)("p",null,[ne,(0,i.eW)(" "+(0,r.v_)(u.value),1)])])]))}};const ae=(0,m.A)(te,[["__scopeId","data-v-6a7bcf99"]]);var oe=ae;const ie=e=>((0,i.Qi)("data-v-5f376dd7"),e=e(),(0,i.jt)(),e),re={class:"json-tool"},se=ie((()=>(0,i.Lk)("h2",{class:"tool-title"},"JSON Formatter",-1))),le={class:"editor-section"},ue=ie((()=>(0,i.Lk)("label",{for:"json-input"},"Paste JSON",-1))),ce={key:0,class:"output-section"},de=ie((()=>(0,i.Lk)("label",{for:"json-output"},"Result",-1))),fe=["value"],ve={key:1,class:"error-msg"};var pe={__name:"JsonFormatterTool",setup(e){const n=(0,s.KR)(""),t=(0,s.KR)(""),o=(0,s.KR)(""),l=()=>{try{o.value="";const e=JSON.parse(n.value);t.value=JSON.stringify(e,null,2)}catch(e){o.value="Invalid JSON: "+e.message,t.value=""}},u=()=>{try{o.value="";const e=JSON.parse(n.value);t.value=JSON.stringify(e)}catch(e){o.value="Invalid JSON: "+e.message,t.value=""}},c=()=>{n.value="",t.value="",o.value=""};return(e,s)=>((0,i.uX)(),(0,i.CE)("div",re,[se,(0,i.Lk)("div",le,[ue,(0,i.bo)((0,i.Lk)("textarea",{id:"json-input","onUpdate:modelValue":s[0]||(s[0]=e=>n.value=e),placeholder:'{"name":"John", "age":30}'},null,512),[[a.Jo,n.value]]),(0,i.Lk)("div",{class:"actions"},[(0,i.Lk)("button",{onClick:l},"Format"),(0,i.Lk)("button",{onClick:u},"Minify"),(0,i.Lk)("button",{onClick:c},"Clear")])]),t.value?((0,i.uX)(),(0,i.CE)("div",ce,[de,(0,i.Lk)("textarea",{id:"json-output",readonly:"",value:t.value},null,8,fe)])):(0,i.Q3)("",!0),o.value?((0,i.uX)(),(0,i.CE)("p",ve,(0,r.v_)(o.value),1)):(0,i.Q3)("",!0)]))}};const me=(0,m.A)(pe,[["__scopeId","data-v-5f376dd7"]]);var he=me;const ge=e=>((0,i.Qi)("data-v-05e4e35b"),e=e(),(0,i.jt)(),e),_e={class:"page-layout"},be={class:"page-content"},ke={class:"price-display"},we={class:"tool-block"},Se=ge((()=>(0,i.Lk)("h2",{class:"tool-title"},"QR Code Generator",-1))),Ee={class:"tool-body"},ye={class:"tool-block"},Le=ge((()=>(0,i.Lk)("h2",{class:"tool-title"},"Password Generator",-1))),Ce={class:"tool-body"},Re={class:"tool-block"},Fe={class:"tool-body"},Pe={class:"tool-block"},Ae={class:"tool-body"};var xe={__name:"ToolsPage",setup(e){const n=(0,s.KR)(),t=e=>0===e.getDay()||6===e.getDay();return(0,i.sV)((()=>{const e=M()().hour();if(e<9||e>14)return;const a=new Date;if(t(a))return;const o=setInterval((()=>fetch("https://push2.eastmoney.com/api/qt/ulist.np/get?secids=0.002127").then((e=>e.json())).then((e=>{n.value=e.data.diff[0].f2}))),3e3);setTimeout((()=>clearInterval(o)),36e5)})),(e,t)=>((0,i.uX)(),(0,i.CE)("div",_e,[(0,i.Lk)("main",be,[(0,i.Lk)("div",null,[(0,i.Lk)("div",ke,(0,r.v_)(n.value),1)]),(0,i.Lk)("section",we,[Se,(0,i.Lk)("div",Ee,[(0,i.bF)(O)])]),(0,i.Lk)("section",ye,[Le,(0,i.Lk)("div",Ce,[(0,i.bF)(Q)])]),(0,i.Lk)("section",Re,[(0,i.Lk)("div",Fe,[(0,i.bF)(oe)])]),(0,i.Lk)("section",Pe,[(0,i.Lk)("div",Ae,[(0,i.bF)(he)])])])]))}};const Me=(0,m.A)(xe,[["__scopeId","data-v-05e4e35b"]]);var Ie=Me;const Te=t(7891);function De(){const e=Te.keys().map((e=>{const n=e.replace(/^\.\/|\.md$/g,""),t=n.split("-").map((e=>e[0].toUpperCase()+e.slice(1))).join(" "),a=Te(e).default||Te(e);return{slug:n,title:t,content:a}}));return e}const Ne=e=>((0,i.Qi)("data-v-5558a83e"),e=e(),(0,i.jt)(),e),Oe={class:"page-layout"},Be={class:"page-content"},Ue=Ne((()=>(0,i.Lk)("h1",null,"Blog Articles",-1)));var Xe={__name:"BlogList",setup(e){const n=De();return(e,t)=>{const a=(0,i.g2)("router-link");return(0,i.uX)(),(0,i.CE)("div",Oe,[(0,i.Lk)("main",Be,[Ue,(0,i.Lk)("ul",null,[((0,i.uX)(!0),(0,i.CE)(i.FK,null,(0,i.pI)((0,s.R1)(n),(e=>((0,i.uX)(),(0,i.CE)("li",{key:e.slug},[(0,i.bF)(a,{to:`/blog/${e.slug}`},{default:(0,i.k6)((()=>[(0,i.eW)((0,r.v_)(e.title),1)])),_:2},1032,["to"])])))),128))])])])}}};const je=(0,m.A)(Xe,[["__scopeId","data-v-5558a83e"]]);var Ke=je,We=t(357);const He=e=>((0,i.Qi)("data-v-d1d684e2"),e=e(),(0,i.jt)(),e),Qe={class:"blog-layout"},ze={class:"sidebar"},qe=He((()=>(0,i.Lk)("h2",null,"Articles",-1))),Je={class:"content"},Ge=["innerHTML"];var Ve={__name:"BlogViewer",setup(e){const n=(0,o.lq)(),t=De(),a=(0,s.KR)(""),l=(0,s.KR)("");function u(e){const n=t.find((n=>n.slug===e));n?(a.value=n.title,l.value=We.xI.parse(n.content)):(a.value="Not Found",l.value="<p>Article not found.</p>")}return(0,i.sV)((()=>u(n.params.slug))),(0,i.wB)((()=>n.params.slug),(e=>u(e))),(e,o)=>{const u=(0,i.g2)("router-link");return(0,i.uX)(),(0,i.CE)("div",Qe,[(0,i.Lk)("aside",ze,[qe,(0,i.Lk)("ul",null,[((0,i.uX)(!0),(0,i.CE)(i.FK,null,(0,i.pI)((0,s.R1)(t),(e=>((0,i.uX)(),(0,i.CE)("li",{key:e.slug},[(0,i.bF)(u,{to:`/blog/${e.slug}`,class:(0,r.C4)({active:e.slug===(0,s.R1)(n).params.slug})},{default:(0,i.k6)((()=>[(0,i.eW)((0,r.v_)(e.title),1)])),_:2},1032,["to","class"])])))),128))])]),(0,i.Lk)("main",Je,[(0,i.Lk)("h1",null,(0,r.v_)(a.value),1),(0,i.Lk)("div",{innerHTML:l.value,class:"markdown"},null,8,Ge)])])}}};const $e=(0,m.A)(Ve,[["__scopeId","data-v-d1d684e2"]]);var Ye=$e;const Ze=[{path:"/",component:w,children:[{path:"",redirect:"/home"},{path:"home",component:A},{path:"tools",component:Ie},{path:"blog",component:Ke},{path:"blog/:slug",component:Ye,meta:{title:"Blogs"}}]}],en=(0,o.aE)({history:(0,o.LA)(),routes:Ze});en.beforeEach(((e,n,t)=>{const a="John's Blog";document.title=e.meta.title||a,t()}));var nn=en,tn={__name:"App",setup(e){return(e,n)=>{const t=(0,i.g2)("router-view");return(0,i.uX)(),(0,i.Wv)(t)}}};const an=(0,m.A)(tn,[["__scopeId","data-v-c5616f56"]]);var on=an;const rn=(0,a.Ef)(on);rn.use(nn),rn.mount("#app")},7891:function(e,n,t){var a={"./simple-single-file-audio-recorder-using-cpp17.md":9527,"./some useful shell commands.md":8708};function o(e){var n=i(e);return t(n)}function i(e){if(!t.o(a,e)){var n=new Error("Cannot find module '"+e+"'");throw n.code="MODULE_NOT_FOUND",n}return a[e]}o.keys=function(){return Object.keys(a)},o.resolve=i,e.exports=o,o.id=7891},7790:function(){},3776:function(){},8285:function(){},8664:function(){},1638:function(){},2668:function(){},5340:function(){},9838:function(){}},n={};function t(a){var o=n[a];if(void 0!==o)return o.exports;var i=n[a]={id:a,loaded:!1,exports:{}};return e[a].call(i.exports,i,i.exports,t),i.loaded=!0,i.exports}t.m=e,function(){var e=[];t.O=function(n,a,o,i){if(!a){var r=1/0;for(c=0;c<e.length;c++){a=e[c][0],o=e[c][1],i=e[c][2];for(var s=!0,l=0;l<a.length;l++)(!1&i||r>=i)&&Object.keys(t.O).every((function(e){return t.O[e](a[l])}))?a.splice(l--,1):(s=!1,i<r&&(r=i));if(s){e.splice(c--,1);var u=o();void 0!==u&&(n=u)}}return n}i=i||0;for(var c=e.length;c>0&&e[c-1][2]>i;c--)e[c]=e[c-1];e[c]=[a,o,i]}}(),function(){t.n=function(e){var n=e&&e.__esModule?function(){return e["default"]}:function(){return e};return t.d(n,{a:n}),n}}(),function(){t.d=function(e,n){for(var a in n)t.o(n,a)&&!t.o(e,a)&&Object.defineProperty(e,a,{enumerable:!0,get:n[a]})}}(),function(){t.g=function(){if("object"===typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"===typeof window)return window}}()}(),function(){t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)}}(),function(){t.r=function(e){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}}(),function(){t.nmd=function(e){return e.paths=[],e.children||(e.children=[]),e}}(),function(){var e={524:0};t.O.j=function(n){return 0===e[n]};var n=function(n,a){var o,i,r=a[0],s=a[1],l=a[2],u=0;if(r.some((function(n){return 0!==e[n]}))){for(o in s)t.o(s,o)&&(t.m[o]=s[o]);if(l)var c=l(t)}for(n&&n(a);u<r.length;u++)i=r[u],t.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return t.O(c)},a=self["webpackChunkblog_of_john"]=self["webpackChunkblog_of_john"]||[];a.forEach(n.bind(null,0)),a.push=n.bind(null,a.push.bind(a))}();var a=t.O(void 0,[504],(function(){return t(1561)}));a=t.O(a)})();